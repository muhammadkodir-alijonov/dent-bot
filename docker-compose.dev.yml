version: "3.8"

services:
  db:
    image: postgres:15-alpine
    env_file:
      - .env.dev
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5433:5432"
    networks:
      - dental_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - .env.dev
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db/${POSTGRES_DB}
      BOT_TOKEN: ${BOT_TOKEN}
      SECRET_KEY: ${SECRET_KEY}
      WEBAPP_URL: ${WEBAPP_URL}
      ENVIRONMENT: ${ENVIRONMENT:-development}
      DEBUG: ${DEBUG:-true}
      ADMIN_USERNAME: ${ADMIN_USERNAME}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
    ports:
      - "3000:8000"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - backend_uploads_dev:/app/uploads
    networks:
      - dental_network
    restart: unless-stopped
    command:
      [
        "uvicorn",
        "app.main:app",
        "--host",
        "0.0.0.0",
        "--port",
        "8000",
        "--reload",
        "--log-level",
        "debug",
      ]

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.dev.conf:/etc/nginx/nginx.conf:ro
      - ./backend/app/static:/app/static:ro
      - backend_uploads_dev:/app/uploads:ro
    depends_on:
      - backend
    networks:
      - dental_network
    restart: unless-stopped

volumes:
  postgres_data_dev:
  backend_uploads_dev:

networks:
  dental_network:
    driver: bridge
    name: dental_dev_network
