services:
  db:
    image: postgres:15
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../db/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - stom_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    build: 
      context: ../backend
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db/${POSTGRES_DB}
      BOT_TOKEN: ${BOT_TOKEN}
      SECRET_KEY: ${SECRET_KEY}
      WEBAPP_URL: ${WEBAPP_URL:-http://localhost:8000}
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ../backend:/app
    networks:
      - stom_network
    restart: unless-stopped

  # Ngrok tunnel - 8000 portni HTTPS qilish
  ngrok:
    image: ngrok/ngrok:latest
    restart: unless-stopped
    command: 
      - "http"
      - "backend:8000"
      - "--log"
      - "stdout"
      - "--host-header"
      - "rewrite"
      - "--request-header-add"
      - "ngrok-skip-browser-warning:true"
    environment:
      - NGROK_AUTHTOKEN=${NGROK_AUTHTOKEN}
    depends_on:
      - backend
    networks:
      - stom_network
    ports:
      - "4040:4040"  # Ngrok web interface (http://localhost:4040)

volumes:
  postgres_data:

networks:
  stom_network:
    driver: bridge